name: "[Dispatch] Release"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'branch를 입력해주세요(master와 release-x.y.z만 허용)'
        required: true
        default: 'master'
      version:
        description: 'version을 입력해주세요(x.y.z)'
        required: true
        default: '1.0.0'
      beginning:
        description: 'release의 첫 시작인 경우 true를 넣어주세요'
        required: false

env:
  BRANCH: ${{ github.event.inputs.branch }}
  VERSION: ${{ github.event.inputs.version }}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}

jobs:
  update_base_image:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.beginning }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set version only major and minor
        run: |
          echo "XY_VERSION=$(echo ${{ env.VERSION }} | cut -d'.' -f1-2)" >> $GITHUB_ENV

      - name: Update base image version in Dockerfile
        run: |
          sed -i 's/FROM cloudforet\/python-core:.*/FROM cloudforet\/python-core:${{ env.XY_VERSION }}/' Dockerfile

      - name: Push artifacts to origin master
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: master
          commit_message: "CI: Update version of base image in Dockerfile"
          commit_user_name: cloudforet-admin
          commit_user_email: admin@cloudforet.io
          commit_author: cloudforet-admin <admin@cloudforet.io>
          push_options: '--force'

  tagging:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: tagging
        run: |
          git config user.email admin@cloudforet.io
          git config user.name cloudforet-admin
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Notice when job fails
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,workflow,job
          author_name: Github Action Slack

  pypi:
    needs: tagging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8' 

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install setuptools wheel twine

      - name: Make all and Packaging
        run: |
          cd src
          python setup.py sdist bdist_wheel

      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          packages-dir: dist/

      - name: Notice when job fails
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,workflow,job
          author_name: Github Action Slack

  docker:
    needs: pypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set version only major and minor
        run: |
          echo "XY_VERSION=$(echo ${{ env.VERSION }} | cut -d'.' -f1-2)" >> $GITHUB_ENV

      - name: Update base image version in Dockerfile
        if: ${{ github.event.inputs.beginning }}
        run: |
          sed -i 's/FROM cloudforet\/python-core:.*/FROM cloudforet\/python-core:${{ env.XY_VERSION }}/' Dockerfile

      - name: Build and push to dockerhub
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: cloudforet/${{ github.event.repository.name }}:${{ env.VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Build and push to ECR
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.ECR_REPO }}/${{ github.event.repository.name }}:${{ env.VERSION }}

      - name: Notice when job fails
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,workflow,job
          author_name: Github Action Slack

  notification:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Slack
        if: always()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,ref,workflow,job
          author_name: Github Action Slack
name: "[Dispatch] Release"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'enter branch (only master and release-x.y.z are allowed)'
        required: true
        default: 'master'
      version:
        description: 'enter version(x.y.z)'
        required: true
        default: '1.0.0'

env:
  BRANCH: ${{ github.event.inputs.branch }}
  VERSION: ${{ github.event.inputs.version }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Invoke versioning workflow
        id: versioning
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: dispatch_versioning.yaml
          ref: ${{ env.BRANCH }}
          wait_workflow: true
          propagate_failure: true
          wait_interval: 5
          client_payload: '{
              "branch": "${{ env.BRANCH }}",
              "version": "${{ env.VERSION }}"
            }'

  mirinae:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Invoke mirinae release workflow
        id: mirinae
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: dispatch_mirinae_release.yaml
          ref: ${{ env.BRANCH }}
          wait_workflow: true
          propagate_failure: true
          wait_interval: 5
          client_payload: '{
              "branch": "${{ env.BRANCH }}",
              "version": "${{ env.VERSION }}"
            }'

  storybook:
    runs-on: ubuntu-latest
    needs: mirinae
    steps:
      - name: Invoke storybook release workflow
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: dispatch_storybook_release.yaml
          ref: ${{ env.BRANCH }}
          wait_workflow: false
          propagate_failure: false
          client_payload: '{
              "branch": "${{ env.BRANCH }}"
            }'

  docker:
    runs-on: ubuntu-latest
    needs: mirinae
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.CLOUDFORET_DOCKER_USERNAME }}
          password: ${{ secrets.CLOUDFORET_DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Build and push to dockerhub
        uses: docker/build-push-action@v4
        env:
          BUILDKIT_COLORS: 1
        with:
          context: .
          file: ./apps/web/Dockerfile
          build-args: |
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}
            TURBO_API=${{ secrets.TURBO_API }}
          platforms: linux/amd64, linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ vars.DOCKER_REPO_OWNER }}/${{ github.event.repository.name }}:${{ env.VERSION }}
            ${{ secrets.ECR_REPO }}/${{ github.event.repository.name }}:latest
            ${{ secrets.ECR_REPO }}/${{ github.event.repository.name }}:${{ env.VERSION }}

      - name: Notice when job fails
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,workflow,job
          author_name: Github Action Slack

  tagging:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

      - name: Configure git
        run: |
          git config --global user.email "${{ vars.GIT_EMAIL }}"
          git config --global user.name "${{ vars.GIT_USERNAME }}"

      - name: Git tagging
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Notice when job fails
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,workflow,job
          author_name: Github Action Slack

  notification:
    needs: tagging
    runs-on: ubuntu-latest
    steps:
      - name: Slack
        if: always()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,ref,workflow,job
          author_name: Github Action Slack